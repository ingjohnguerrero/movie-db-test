//
//  MovieDetailModuleViewController.swift
//  Movie DB Test
//
//  Created by John Edwin Guerrero Ayala on 6/9/19.
//  Copyright (c) 2019 John Edwin Guerrero Ayala. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class MovieDetailModuleViewController: UIViewController {

    @IBOutlet weak var backdropImage: UIImageView!
    @IBOutlet weak var backdropImageHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var posterImage: UIImageView!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var releaseDateLabel: UILabel!
    @IBOutlet weak var genresLabel: UILabel!
    @IBOutlet weak var votingAverageLabel: UILabel!
    @IBOutlet weak var scrollView: UIScrollView!
    /// Estimated backdrop estimated height depending on the screen screen width
    fileprivate var backdropImageEstimatedHeight: CGFloat {
        get {
            let screenSize: CGRect = UIScreen.main.bounds
            let screenWidth = screenSize.width
            let aspectRatioContant: CGFloat = (281/500)
            return (screenWidth * aspectRatioContant)
        }
    }

    // MARK: - Public properties -

    var presenter: MovieDetailModulePresenterInterface!

    // MARK: - Private properties -
    fileprivate var isScrollTrackingEnabled = true
    fileprivate var previousOffset: CGFloat = 0

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: .cancel, target: self, action: #selector(onCloseButton))
    }

    @objc func onCloseButton(_ sender: Any) {
        presenter.closeMovieDetailView()
    }
}

// MARK: - Extensions -

extension MovieDetailModuleViewController: MovieDetailModuleViewInterface {
}

extension MovieDetailModuleViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let scrollDiff = scrollView.contentOffset.y - self.previousOffset
        
        let absoluteTop: CGFloat = 0;
        let absoluteBottom: CGFloat = scrollView.contentSize.height - scrollView.frame.size.height;
        
        let isScrollingDown = scrollDiff > 0 && scrollView.contentOffset.y > absoluteTop
        let isScrollingUp = scrollDiff < 0 && scrollView.contentOffset.y < absoluteBottom
        
        if canAnimateHeader(scrollView) {
            
            // Calculate new header height
            var newHeight = self.backdropImageHeightConstraint.constant
            if isScrollingDown {
                newHeight = max(0, self.backdropImageHeightConstraint.constant - abs(scrollDiff))
            } else if isScrollingUp {
                newHeight = min(self.backdropImageEstimatedHeight, self.backdropImageHeightConstraint.constant + abs(scrollDiff))
            }
            
            // Header needs to animate
            if newHeight != self.backdropImageHeightConstraint.constant {
                self.backdropImageHeightConstraint.constant = newHeight
                self.updateHeader()
                self.setScrollPosition(self.previousOffset)
            }
            
            self.previousOffset = scrollView.contentOffset.y
        }
    }
    
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        self.scrollViewDidStopScrolling()
    }
    
    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        if !decelerate {
            self.scrollViewDidStopScrolling()
        }
    }
    
    func scrollViewDidStopScrolling() {
        let range = self.backdropImageEstimatedHeight
        let midPoint = (range / 2)
        
        if self.backdropImageHeightConstraint.constant > midPoint {
            self.expandHeader()
        } else {
            self.collapseHeader()
        }
    }
    
    func canAnimateHeader(_ scrollView: UIScrollView) -> Bool {
        // Calculate the size of the scrollView when header is collapsed
        let scrollViewMaxHeight = scrollView.frame.height + self.backdropImageHeightConstraint.constant
        
        // Make sure that when header is collapsed, there is still room to scroll
        return scrollView.contentSize.height > scrollViewMaxHeight
    }
    
    func collapseHeader() {
        self.view.layoutIfNeeded()
        UIView.animate(withDuration: 0.2, animations: {
            self.backdropImageHeightConstraint.constant = 0
            self.updateHeader()
            self.view.layoutIfNeeded()
        })
    }
    
    func expandHeader() {
        self.view.layoutIfNeeded()
        UIView.animate(withDuration: 0.2, animations: {
            self.backdropImageHeightConstraint.constant = self.backdropImageEstimatedHeight
            self.updateHeader()
            self.view.layoutIfNeeded()
        })
    }
    
    func setScrollPosition(_ position: CGFloat) {
        self.scrollView.contentOffset = CGPoint(x: self.scrollView.contentOffset.x, y: position)
    }
    
    func updateHeader() {
        let range = self.backdropImageEstimatedHeight
        let openAmount = self.backdropImageHeightConstraint.constant
        let percentage = openAmount / range
        
        self.backdropImage.alpha = percentage
    }
}
