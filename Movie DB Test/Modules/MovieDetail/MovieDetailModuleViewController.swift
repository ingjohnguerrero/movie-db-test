//
//  MovieDetailModuleViewController.swift
//  Movie DB Test
//
//  Created by John Edwin Guerrero Ayala on 6/9/19.
//  Copyright (c) 2019 John Edwin Guerrero Ayala. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class MovieDetailModuleViewController: UIViewController {

    @IBOutlet weak var backdropImage: UIImageView!
    @IBOutlet weak var backdropImageHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var posterImage: UIImageView!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var releaseDateLabel: UILabel!
    @IBOutlet weak var genresLabel: UILabel!
    @IBOutlet weak var votingAverageLabel: UILabel!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var overviewLabel: UILabel!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    /// Estimated backdrop estimated height depending on the screen screen width
    fileprivate var backdropImageEstimatedHeight: CGFloat {
        let screenSize: CGRect = UIScreen.main.bounds
        let screenWidth = screenSize.width
        let aspectRatioContant: CGFloat = (281/500)
        return (screenWidth * aspectRatioContant)
    }

    // MARK: - Public properties -

    var presenter: MovieDetailModulePresenterInterface!

    // MARK: - Private properties -
    fileprivate var isScrollTrackingEnabled = true
    fileprivate var previousOffset: CGFloat = 0
    fileprivate var movie: Movie?

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: .cancel, target: self, action: #selector(onCloseButton))
    }

    override func viewWillAppear(_ animated: Bool) {
        presenter.getMovieDetails()
    }

    @objc func onCloseButton(_ sender: Any) {
        presenter.closeMovieDetailView()
    }
}

// MARK: - Extensions -

extension MovieDetailModuleViewController: MovieDetailModuleViewInterface {
    func startLoading() {
        activityIndicator?.startAnimating()
        backdropImage.isHidden = true
        scrollView.isHidden = true
        activityIndicator?.isHidden = false
    }

    func finishLoading() {
        activityIndicator?.stopAnimating()
        activityIndicator?.isHidden = true
        backdropImage.isHidden = false
        scrollView.isHidden = false
    }

    func setMovie(movie: Movie) {
        self.movie = movie
        overviewLabel.text = movie.overview
        titleLabel.text = movie.title
        releaseDateLabel.text = "Release date: \(movie.releaseDate)"
        votingAverageLabel.text = "Voting average: \(movie.votingAverage)"
        posterImage.kf.setImage(
            with: URL(string: movie.posterImageUrl),
            placeholder: UIImage(named: "posterPlaceholder"),
            options: [.transition(.fade(1)), .loadDiskFileSynchronously]
        )
        if movie.backdropImagePath != nil {
            backdropImage.kf.setImage(
                with: URL(string: movie.backdropImageUrl),
                placeholder: UIImage(named: "posterPlaceholder"),
                options: [.transition(.fade(1)), .loadDiskFileSynchronously]
            )
        }
    }

    func showErrorView() {

    }

    func showEmptyView() {
        backdropImage.isHidden = true
        scrollView.isHidden = true
    }

}

extension MovieDetailModuleViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let scrollDiff = scrollView.contentOffset.y - self.previousOffset

        let absoluteTop: CGFloat = 0
        let absoluteBottom: CGFloat = scrollView.contentSize.height - scrollView.frame.size.height

        let isScrollingDown = scrollDiff > 0 && scrollView.contentOffset.y > absoluteTop
        let isScrollingUp = scrollDiff < 0 && scrollView.contentOffset.y < absoluteBottom

        if canAnimateHeader(scrollView) {

            // Calculate new header height
            var newHeight = self.backdropImageHeightConstraint.constant
            if isScrollingDown {
                newHeight = max(0, self.backdropImageHeightConstraint.constant - abs(scrollDiff))
            } else if isScrollingUp {
                newHeight = min(self.backdropImageEstimatedHeight, self.backdropImageHeightConstraint.constant + abs(scrollDiff))
            }

            // Header needs to animate
            if newHeight != self.backdropImageHeightConstraint.constant {
                self.backdropImageHeightConstraint.constant = newHeight
                self.updateHeader()
                self.setScrollPosition(self.previousOffset)
            }

            self.previousOffset = scrollView.contentOffset.y
        }
    }

    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        self.scrollViewDidStopScrolling()
    }

    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        if !decelerate {
            self.scrollViewDidStopScrolling()
        }
    }

    func scrollViewDidStopScrolling() {
        let range = self.backdropImageEstimatedHeight
        let midPoint = (range / 2)

        if self.backdropImageHeightConstraint.constant > midPoint {
            self.expandHeader()
        } else {
            self.collapseHeader()
        }
    }

    func canAnimateHeader(_ scrollView: UIScrollView) -> Bool {
        // Calculate the size of the scrollView when header is collapsed
        let scrollViewMaxHeight = scrollView.frame.height + self.backdropImageHeightConstraint.constant

        // Make sure that when header is collapsed, there is still room to scroll
        return scrollView.contentSize.height > scrollViewMaxHeight
    }

    func collapseHeader() {
        self.view.layoutIfNeeded()
        UIView.animate(withDuration: 0.2, animations: {
            self.backdropImageHeightConstraint.constant = 0
            self.updateHeader()
            self.view.layoutIfNeeded()
        })
    }

    func expandHeader() {
        self.view.layoutIfNeeded()
        UIView.animate(withDuration: 0.2, animations: {
            self.backdropImageHeightConstraint.constant = self.backdropImageEstimatedHeight
            self.updateHeader()
            self.view.layoutIfNeeded()
        })
    }

    func setScrollPosition(_ position: CGFloat) {
        self.scrollView.contentOffset = CGPoint(x: self.scrollView.contentOffset.x, y: position)
    }

    func updateHeader() {
        let range = self.backdropImageEstimatedHeight
        let openAmount = self.backdropImageHeightConstraint.constant
        let percentage = openAmount / range

        self.backdropImage.alpha = percentage
    }
}
